/// <reference types="react" />
import { TStylesProps as TRNSStylesProps } from './types';
import RNSIcon, { TIconProps as TRNSIconProps } from './icon';
import { TImageProps as TRNSImageProps } from './image';
import { TImageBackgroundProps as TRNSImageBackgroundProps } from './image-background';
import { TSafeAreaViewProps as TRNSSafeAreaViewProps } from './safe-area-view';
import { TScrollViewProps as TRNSScrollViewProps } from './scroll-view';
import { TTextProps as TRNSTextProps } from './text';
import { TTextInputProps as TRNSTextInputProps } from './text-input';
import { TPressableProps as TRNSPressableProps, TTouchableHighlightProps as TRNSTouchableHighlightProps, TTouchableOpacityProps as TRNSTouchableOpacityProps } from './touchable';
import { TViewProps as TRNSViewProps } from './view';
export declare const Icon: typeof RNSIcon;
export declare const Image: <TStyleName extends string>({ styleNames, style, ...props }: TRNSImageProps<TStyleName>) => JSX.Element;
export declare const ImageBackground: <TStyleName extends string>({ styleNames, style, ...props }: TRNSImageBackgroundProps<TStyleName>) => JSX.Element;
export declare const Pressable: <TStyleName extends string>({ styleNames, style, ...props }: TRNSPressableProps<TStyleName>) => JSX.Element;
export declare const SafeAreaView: <TStyleName extends string>({ styleNames, style, ...props }: TRNSSafeAreaViewProps<TStyleName>) => JSX.Element;
export declare const ScrollView: <TScrollViewStyle extends string, TScrollViewContentContainerStyle extends string>({ styleNames, style, contentContainerStyleNames, contentContainerStyle, ...props }: TRNSScrollViewProps<TScrollViewStyle, TScrollViewContentContainerStyle>) => JSX.Element;
export declare const Text: <TStyleName extends string>({ styleNames, style, ...props }: TRNSTextProps<TStyleName>) => JSX.Element;
export declare const TextInput: <TStyleName extends string>({ styleNames, style, ...props }: TRNSTextInputProps<TStyleName>) => JSX.Element;
export declare const ThemeProvider: import("react").FC<import("../theme-context").TContext>;
export declare const TouchableHighlight: <TStyleName extends string>({ styleNames, style, ...props }: TRNSTouchableHighlightProps<TStyleName>) => JSX.Element;
export declare const TouchableOpacity: <TStyleName extends string>({ styleNames, style, ...props }: TRNSTouchableOpacityProps<TStyleName>) => JSX.Element;
export declare const View: <TStyleName extends string>({ styleNames, style, ...props }: TRNSViewProps<TStyleName>) => JSX.Element;
export declare type TStylesProps<TStyleName extends string> = TRNSStylesProps<TStyleName>;
export declare type TPressableProps<TStyleName extends string> = TRNSPressableProps<TStyleName>;
export declare type TTouchableHighlightProps<TStyleName extends string> = TRNSTouchableHighlightProps<TStyleName>;
export declare type TTouchableOpacityProps<TStyleName extends string> = TRNSTouchableOpacityProps<TStyleName>;
export declare type TIconProps<TStyleName extends string> = TRNSIconProps<TStyleName>;
export declare type TImageProps<TStyleName extends string> = TRNSImageProps<TStyleName>;
export declare type TImageBackgroundProps<TStyleName extends string> = TRNSImageBackgroundProps<TStyleName>;
export declare type TSafeAreaViewProps<TStyleName extends string> = TRNSSafeAreaViewProps<TStyleName>;
export declare type TScrollViewProps<TScrollViewStyle extends string, TScrollViewContentContainerStyle extends string> = TRNSScrollViewProps<TScrollViewStyle, TScrollViewContentContainerStyle>;
export declare type TTextProps<TStyleName extends string> = TRNSTextProps<TStyleName>;
export declare type TTextInputProps<TStyleName extends string> = TRNSTextInputProps<TStyleName>;
export declare type TViewProps<TStyleName extends string> = TRNSViewProps<TStyleName>;
