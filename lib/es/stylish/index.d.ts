/// <reference types="react" />
import { TStylesProps as TRNSStylesProps } from '../stylers/types';
import rnsUseStyle from '../stylers/use-style';
import RNSIcon, { TIconProps as TRNSIconProps } from './icon';
import { TImageProps as TRNSImageProps } from './image';
import { TImageBackgroundProps as TRNSImageBackgroundProps } from './image-background';
import { TKeyboardAvoidingViewProps as TRNSKeyboardAvoidingViewProps } from './keyboard-avoiding-view';
import { TSafeAreaViewProps as TRNSSafeAreaViewProps } from './safe-area-view';
import { TScrollViewProps as TRNSScrollViewProps } from './scroll-view';
import { TTextProps as TRNSTextProps } from './text';
import { TTextInputProps as TRNSTextInputProps } from './text-input';
import { TPressableProps as TRNSPressableProps, TTouchableHighlightProps as TRNSTouchableHighlightProps, TTouchableOpacityProps as TRNSTouchableOpacityProps } from './touchable';
import { TViewProps as TRNSViewProps } from './view';
export declare const Icon: typeof RNSIcon;
export declare const Image: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSImageProps<T>) => JSX.Element;
export declare const ImageBackground: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSImageBackgroundProps<T>) => JSX.Element;
export declare const Pressable: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSPressableProps<T>) => JSX.Element;
export declare const KeyboardAvoidingView: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSKeyboardAvoidingViewProps<T>) => JSX.Element;
export declare const SafeAreaView: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSSafeAreaViewProps<T>) => JSX.Element;
export declare const ScrollView: <TScrollViewStyle extends string, TScrollViewContentContainerStyle extends string>({ styleNamespace, styleNames, style, contentContainerStyleNamespace, contentContainerStyleNames, contentContainerStyle, ...props }: TRNSScrollViewProps<TScrollViewStyle, TScrollViewContentContainerStyle>) => JSX.Element;
export declare const Text: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSTextProps<T>) => JSX.Element;
export declare const TextInput: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSTextInputProps<T>) => JSX.Element;
export declare const ThemeProvider: import("react").FC<import("../stylers/theme-context").TContext>;
export declare const TouchableHighlight: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSTouchableHighlightProps<T>) => JSX.Element;
export declare const TouchableOpacity: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSTouchableOpacityProps<T>) => JSX.Element;
export declare const useStyle: typeof rnsUseStyle;
export declare const View: <T extends string>({ styleNamespace, styleNames, style, ...props }: TRNSViewProps<T>) => JSX.Element;
export declare type TStylesProps<T extends string> = TRNSStylesProps<T>;
export declare type TPressableProps<T extends string> = TRNSPressableProps<T>;
export declare type TTouchableHighlightProps<T extends string> = TRNSTouchableHighlightProps<T>;
export declare type TTouchableOpacityProps<T extends string> = TRNSTouchableOpacityProps<T>;
export declare type TIconProps<T extends string> = TRNSIconProps<T>;
export declare type TImageProps<T extends string> = TRNSImageProps<T>;
export declare type TImageBackgroundProps<T extends string> = TRNSImageBackgroundProps<T>;
export declare type TKeyboardAvoidingViewProps<T extends string> = TRNSKeyboardAvoidingViewProps<T>;
export declare type TSafeAreaViewProps<T extends string> = TRNSSafeAreaViewProps<T>;
export declare type TScrollViewProps<TScrollViewStyle extends string, TScrollViewContentContainerStyle extends string> = TRNSScrollViewProps<TScrollViewStyle, TScrollViewContentContainerStyle>;
export declare type TTextProps<T extends string> = TRNSTextProps<T>;
export declare type TTextInputProps<T extends string> = TRNSTextInputProps<T>;
export declare type TViewProps<T extends string> = TRNSViewProps<T>;
